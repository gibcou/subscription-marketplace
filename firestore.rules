rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && 
             request.auth.token.email_verified == true;
    }
    
    function isValidProductData() {
      return request.resource.data.keys().hasAll(['title', 'price', 'sellerId', 'createdAt']) &&
             request.resource.data.title is string &&
             request.resource.data.title.size() > 0 &&
             request.resource.data.title.size() <= 100 &&
             request.resource.data.price is number &&
             request.resource.data.price > 0 &&
             request.resource.data.sellerId == request.auth.uid;
    }
    
    function isValidOrderData() {
      return request.resource.data.keys().hasAll(['buyerId', 'sellerId', 'totalAmount', 'createdAt']) &&
             request.resource.data.buyerId == request.auth.uid &&
             request.resource.data.totalAmount is number &&
             request.resource.data.totalAmount > 0;
    }
    
    // Users collection - users can only read/write their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId) && isValidUser();
      allow create: if isOwner(userId) && 
                       request.resource.data.keys().hasAll(['email', 'role', 'createdAt']) &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.role in ['buyer', 'seller'];
    }
    
    // Products collection
    match /products/{productId} {
      // Anyone can read products
      allow read: if true;
      
      // Only authenticated sellers can create products with valid data
      allow create: if isValidUser() && 
                       isValidProductData() &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'seller';
      
      // Only the product owner can update/delete
      allow update, delete: if isValidUser() && 
                               resource.data.sellerId == request.auth.uid &&
                               (request.resource == null || isValidProductData());
    }
    
    // Orders collection
    match /orders/{orderId} {
      // Only buyer and seller can read the order
      allow read: if isValidUser() && 
                     (resource.data.buyerId == request.auth.uid || 
                      resource.data.sellerId == request.auth.uid);
      
      // Only buyers can create orders
      allow create: if isValidUser() && 
                       isValidOrderData() &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'buyer';
      
      // Only buyer and seller can update order status
      allow update: if isValidUser() && 
                       (resource.data.buyerId == request.auth.uid || 
                        resource.data.sellerId == request.auth.uid) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']);
    }
    
    // Subscriptions collection
    match /subscriptions/{userId} {
      allow read, write: if isOwner(userId) && 
                            isValidUser() &&
                            get(/databases/$(database)/documents/users/$(userId)).data.role == 'seller';
      
      allow create: if isOwner(userId) && 
                       isValidUser() &&
                       request.resource.data.keys().hasAll(['plan', 'status', 'createdAt']) &&
                       request.resource.data.plan in ['monthly', 'yearly'] &&
                       request.resource.data.status in ['active', 'inactive', 'cancelled'];
    }
    
    // Reviews collection (if implemented)
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isValidUser() &&
                       request.resource.data.keys().hasAll(['productId', 'buyerId', 'rating', 'createdAt']) &&
                       request.resource.data.buyerId == request.auth.uid &&
                       request.resource.data.rating is number &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5;
      
      allow update, delete: if isValidUser() && 
                               resource.data.buyerId == request.auth.uid;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}